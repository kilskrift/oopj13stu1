Rapport, inlämningsuppgift 1, objektorienterad programmering med java sommaren 2013.
Av Kristian Grossman-Madsen.

Jag började med att sätta upp ett projekt i mitt IDE, IntelliJ IDEA. Sedan importerade jag den givna källkoden,
BallWorld.java, till projektet. Nästa steg blev att skapa ett gitrepo & klona det till github, varefter jag checkade in
filen, ren readme-fil med uppgiftstexten, samt denna rapport.

Uppgiften finns i sin helhet tillgängligt på github, se https://github.com/kilskrift/oopj13stu1, särskilt då historiken
 på https://github.com/kilskrift/oopj13stu1/commits/master.

Deluppgift 1 - Fikapaus

Uppgiften var att "Kompilera programmet med kommandot javac BallWorld.java och provkör det med kommandot java BallWorld.
Beskriv med några få ord vad som händer."

Jag körde först programmet från mitt IDE, det öppnar ett fyrkantigt fönster "AppMain" i övre vänstra hörnet på skärmen,
 fönstret har svart bakgrund & innehåller en "studsande" gul cirkel som rör sig i en sned rektangel likt en boll som
 studsar i en låda. Programmet visade detta tills jag stängde ner det efter en stund.

Därefter letade jag upp de kompilerade klassfilerna som mitt IDE lagt under en mapp out/production/oopj13stu1 (namnet på
mitt projekt). Det fanns tre klass-filer: Ball.class, BallPanel.class & BallWorld.class. Jag ställde mig i mappen &
körde kommandot "$ java BallWorld". Resultatet blev detsamma som när jag körde programmet från mitt IDE.

För att avsluta min undersökning gick jag till källkoden i mappen src/ i mitt projekt. När jag först försökte kompilera
filen med "$ javac BallWorld.java" fick jag ett gäng felmeddelanden eftersom det låg en hel del svenska tecken i koden.

Efter att ha läst på med "$ man javac" satte jag flaggan " -encoding ISO8859-1" & då gick det bättre att kompilera. Nu
kunde jag köra den manuellt kompilerade BallWorld.class & fick återigen samma resultat som från inne i mitt IDE.


Deluppgift 2 - Färgblindhet

Uppgiften var "Byt färg på bollen (till t.ex. vit) utan att ändra i konstruktorn Ball() där standardfärgen sätts. Du
behöver göra ett anrop till en metod som sätter färgen för en boll. Vilket anrop och var i koden den skall utföras ska
du lista ut själv. Beskriv med några få ord vilka ändringar du gjort."

Jag började med att titta i Ball-klassen om det fanns någon metod som ändrar färg på bollen -- hittade setColor(). Den
tar ett argument av typen Color, & på rad 23 sätts ett förval till Color.yellow. Efter det vet jag lite bättre vad jag
 har för värden att jobba med, jag bestämde mig för att göra bollen blå.

Jag letade sedan upp var i BallWorld (eg. i BallPanel, visade det sig) som bollen instantieras & lade till ett anrop
till setColor på instansen med Color.blue som argument. Vid provkörning såg allt ut som förväntat.

Deluppgift 3 - Fängslande

Uppgiften löd "En s.k. "bounding box" är en rektangel som anger gränserna som bollen studsar inom. Om du ändrar
storleken på fönstret upptäcker du att området inom vilket bollen studsar är oförändrat. Metoden wasResized() anropas
då fönsterstorleken ändras. Modifiera wasResized() så att "bounding boxen" ändras till fönstrets rätta storlek. Leta i
koden för att hitta en metod du kan använda och för att få en uppfattning om hur den ska användas. Beskriv vilka
ändringar du gjort."

I BallPanel kontrolleras vid varje "tick" om fönstret ändrat storlek via eventlyssnaren actionPerformed(). Om det har
det anropas wasResized(). Själva området en boll studsar inom är en egenskap hos bollen, och ändras med metoden
setBoundingBox(). Jag lade till ett anrop till ball.setBoundingBox i wasResized(), & nu fungerar det att ändra storlek
på fönstret, bollen studsar över hela ytan.

Deluppgift 4 - Storlek

"I klassen Ball finns metoder för att ändra färg och "bounding box", men det finns ingen metod för att ändra bollens
storlek (diameter). Lägg till en sådan metod och använd den sedan för att ändra storleken på bollen. Beskriv vilka
ändringar du gjort."

Jag lade till en setter för attributet diameter i klassen Ball & anropar sedan den på samma plats där jag tidigare satt
bollens färg.

Deluppgift 5 - Dubbelt så många

"Lägg in en extra boll med annan färg, storlek och hastighet så att det finns totalt två bollar som studsar. Beskriv
vilka ändringar du gjort."

Jag gjorde helt enkelt så att jag skapade en till boll -- ball2 -- i BallPanel & initierade den med lite andra värden än
ball, så att den fick annan riktning & utseende än den ursprungliga bollen. Det hade förstås varit snyggare att skapa en
lista av bollar & iterera över den vid varje referens till ball i ursprungskoden, men för uppgiften räcker det med ett
"fulhack", jag ber om överseende med detta.

Deluppgift 6 - Pulsarer

"Låt bollarna få pulserande storlek. För detta behöver du en boolesk tillståndsvariabel i klassen Ball som anger om
bollen för tillfället krymper eller växer. Vidare behöver du tröskelvillkor som byter tillstånd på variabeln då bollen
når sin minimistorlek och när den når sin maximistorlek (väljs med förstånd). Modifiera sedan metoden action() så att
bollen får den pulserande egenskapen. Beskriv vilka ändringar du gjort."

Jag börjar med att lägga till ett attribut Ball.growing, som sedan initeras i konstruktorn för Ball. I metoden action()
kontrolleras om bollen är växande eller inte, och ett nytt värde på bollens diameter sätts därefter, samt growing sätts
om beroende på om ett största respektive lägsta värde passerats.





